** Anonymous inner classes vs Lambda Expressions:-
______________________________________________________
 ** Wherever we are using anonymous inner classes there may be a chance of using Lambda expression
    to reduce length of the code and to resolve complexity.
 
 ** What are the advantages of Lambda expression:-
 ______________________________________________________
 ** We can reduce length of the code so that readability of the code will be improved.
 ** We can resolve complexity of anonymous inner classes. 
 ** We can provide Lambda expression in the place of object. 
 ** We can pass lambda expression as argument to methods.
  
 ********NOTE********
_________________________
 **  Anonymous inner class can extend concrete class, can extend abstract class, can implement interface with any number of methods but
 **  Lambda expression can implement an interface with only single abstract method (Functional Interface).
 **  Hence if anonymous inner class implements Functional Interface in that particular case only we can replace with lambda expressions. 
          Hence wherever anonymous inner class concept is there, it may not possible to replace with Lambda expressions.
 **  Anonymous inner class! = Lambda Expression 
 **  Inside anonymous inner class we can declare instance variables.
 **  Inside anonymous inner class “this” always refers current inner class object(anonymous inner class) but not related  outer class object  
 
 **  Eg:-  ** Inside lambda expression we can’t declare instance variables. 
           ** Whatever the variables declare inside lambda expression are simply acts as local variables 
		   ** Within lambda expression ‘this” keyword represents current outer class object reference 
		                 (that is current enclosing class reference in which we declare lambda expression)
           ** From lambda expression we can access enclosing class variables and enclosing method variables directly. 	
           ** The local variables referenced from lambda expression are implicitly final and
         		   hence we can’t perform re-assignment for those  local variables otherwise we get compile time error.
				   
    
****Differences between anonymous inner classes and Lambda expression:-****	
_________________________________________________________________________________________________________________________________________________________
Anonymous Inner class:-                                               |                     Lambda Expression:-
_______________________                                               |               _________________________________
                                                                      |
  ** It’s a class without name                                        |  ** It’s a method without name (anonymous function). 
  ** Anonymous inner class can extend Abstract and concrete classes   |  ** lambda expression can’t extend Abstract and concrete classes.
  ** Anonymous inner class can implement  An interface                |  ** lambda expression can implement an Interface which contains 
      that contains any number of Abstract methods                    |      single abstract method (Functional Interface) 
	                                                                  |
	                                                                  |  
  ** Inside anonymous inner class we can Declare instance variables.  |  ** Inside lambda expression we can’t Declare instance  variables,  
                                                                      |     whatever the variables declared are simply  acts as local variables.
  ** Anonymous inner classes can be Instantiated                      |  ** lambda expressions can’t be instantiated 
  ** Inside anonymous inner class “this” Always refers current        |  ** Inside anonymous inner class “this” Always refers current
      anonymous Inner class object but not outer class Object.        |       outer  class object. That is enclosing class object.
	                                                                  |
  ** Anonymous inner class is the best choice If                      |  ** Lambda expression is best choice if we want to handle interface
      we want to handle multiple methods.                             |      with single abstract method(Functional Interface).
                                                                      |
	                                                                  |  
  ** In the case of anonymous inner class At the time of              |  ** At the time of compilation no dot class file will be generated
     compilation a separate Dot class file will be                    |      for lambda expression.It simply converts in to private method
	 generated (outerclass$1.class)                                   |       outer class.
	                                                                  |
  ** Memory allocated on demand Whenever we are creating an object    |  ** Reside in parmanent memory of jvm(method area).
                                                                      |
_________________________________________________________________________________________________________________________________________________